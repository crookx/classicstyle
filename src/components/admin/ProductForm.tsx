
'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { useToast } from '@/hooks/use-toast';
import type { Product, ProductColor } from '@/types';
import { addProductAction } from '@/lib/actions/productActions'; // We'll create this action
import { useRouter } from 'next/navigation';
import { Checkbox } from '../ui/checkbox';
import { useState } from 'react';
import { Loader2 } from 'lucide-react';


// Define the Zod schema for product form validation
const productFormSchema = z.object({
  name: z.string().min(3, { message: "Product name must be at least 3 characters." }),
  price: z.coerce.number().positive({ message: "Price must be a positive number." }),
  originalPrice: z.coerce.number().optional().default(0).transform(val => val || undefined), // Optional, transforms 0 to undefined
  imageUrl: z.string().url({ message: "Please enter a valid image URL." }).or(z.literal('')),
  dataAiHint: z.string().optional(),
  category: z.string().min(2, { message: "Category is required." }),
  subCategory: z.string().optional(),
  description: z.string().min(10, { message: "Description must be at least 10 characters." }),
  details: z.string().optional(), // Comma-separated initially, then processed
  colors: z.string().optional(), // Format: "Red:#FF0000, Blue:#0000FF"
  sizes: z.string().optional(), // Comma-separated: "S,M,L"
  tags: z.string().optional(), // Comma-separated
  sku: z.string().optional(),
  isFeatured: z.boolean().default(false).optional(),
});

type ProductFormValues = z.infer<typeof productFormSchema>;

interface ProductFormProps {
  initialData?: Product; // For editing, not used in this step
}

export default function ProductForm({ initialData }: ProductFormProps) {
  const { toast } = useToast();
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<ProductFormValues>({
    resolver: zodResolver(productFormSchema),
    defaultValues: initialData ? {
      ...initialData,
      price: initialData.price || 0,
      originalPrice: initialData.originalPrice || undefined,
      details: initialData.details?.join('\\n') || '',
      colors: initialData.colors?.map(c => `${c.name}:${c.hex}`).join(', ') || '',
      sizes: initialData.sizes?.join(', ') || '',
      tags: initialData.tags?.join(', ') || '',
      isFeatured: initialData.isFeatured || false,
    } : {
      name: '',
      price: 0,
      originalPrice: undefined,
      imageUrl: '',
      dataAiHint: '',
      category: '',
      subCategory: '',
      description: '',
      details: '',
      colors: '',
      sizes: '',
      tags: '',
      sku: '',
      isFeatured: false,
    },
  });

  async function onSubmit(data: ProductFormValues) {
    setIsSubmitting(true);
    try {
      // Process form data into Product structure
      const productData: Partial<Product> = {
        ...data,
        details: data.details?.split('\\n').map(d => d.trim()).filter(d => d) || [],
        colors: data.colors?.split(',').map(c => {
          const parts = c.split(':');
          return { name: parts[0]?.trim(), hex: parts[1]?.trim() };
        }).filter(c => c.name && c.hex) as ProductColor[] || [],
        sizes: data.sizes?.split(',').map(s => s.trim()).filter(s => s) || [],
        tags: data.tags?.split(',').map(t => t.trim()).filter(t => t) || [],
      };
      
      // For "Add Product", ID will be generated by the action
      const result = await addProductAction(productData as Omit<Product, 'id' | 'rating' | 'reviewCount'>);

      if (result.success && result.product) {
        toast({
          title: "Product Added!",
          description: `${result.product.name} has been successfully added.`,
        });
        router.push('/admin/products'); // Redirect to product list
      } else {
        toast({
          title: "Error",
          description: result.error || "Failed to add product.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("Product form submission error:", error);
      toast({
        title: "Submission Error",
        description: "An unexpected error occurred. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField control={form.control} name="name" render={({ field }) => (
            <FormItem><FormLabel>Product Name</FormLabel><FormControl><Input placeholder="e.g., Classic Silk Scarf" {...field} /></FormControl><FormMessage /></FormItem>
          )} />
          <FormField control={form.control} name="sku" render={({ field }) => (
            <FormItem><FormLabel>SKU (Optional)</FormLabel><FormControl><Input placeholder="e.g., CS-SLK-SCR-001" {...field} /></FormControl><FormMessage /></FormItem>
          )} />
        </div>

        <FormField control={form.control} name="description" render={({ field }) => (
          <FormItem><FormLabel>Description</FormLabel><FormControl><Textarea placeholder="Detailed product description..." {...field} rows={4} /></FormControl><FormMessage /></FormItem>
        )} />

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField control={form.control} name="price" render={({ field }) => (
            <FormItem><FormLabel>Price ($)</FormLabel><FormControl><Input type="number" step="0.01" placeholder="e.g., 49.99" {...field} /></FormControl><FormMessage /></FormItem>
          )} />
          <FormField control={form.control} name="originalPrice" render={({ field }) => (
            <FormItem><FormLabel>Original Price ($) (Optional)</FormLabel><FormControl><Input type="number" step="0.01" placeholder="e.g., 59.99" {...field} /></FormControl><FormDescription>If the product is on sale.</FormDescription><FormMessage /></FormItem>
          )} />
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField control={form.control} name="category" render={({ field }) => (
            <FormItem><FormLabel>Category</FormLabel><FormControl><Input placeholder="e.g., Accessories" {...field} /></FormControl><FormMessage /></FormItem>
          )} />
          <FormField control={form.control} name="subCategory" render={({ field }) => (
            <FormItem><FormLabel>Sub-Category (Optional)</FormLabel><FormControl><Input placeholder="e.g., Scarves" {...field} /></FormControl><FormMessage /></FormItem>
          )} />
        </div>

        <FormField control={form.control} name="imageUrl" render={({ field }) => (
          <FormItem><FormLabel>Image URL</FormLabel><FormControl><Input placeholder="https://placehold.co/600x800.png" {...field} /></FormControl><FormMessage /></FormItem>
        )} />
        <FormField control={form.control} name="dataAiHint" render={({ field }) => (
          <FormItem><FormLabel>Image AI Hint (Optional)</FormLabel><FormControl><Input placeholder="e.g., silk scarf pattern" {...field} /></FormControl><FormDescription>Keywords for AI image search if placeholder is used.</FormDescription><FormMessage /></FormItem>
        )} />

        <FormField control={form.control} name="details" render={({ field }) => (
          <FormItem><FormLabel>Product Details (Optional)</FormLabel><FormControl><Textarea placeholder="100% Mulberry Silk&#x000A;Hand-rolled edges&#x000A;Made in Italy" {...field} rows={4} /></FormControl><FormDescription>Enter each detail on a new line.</FormDescription><FormMessage /></FormItem>
        )} />
        
        <FormField control={form.control} name="colors" render={({ field }) => (
          <FormItem><FormLabel>Colors (Optional)</FormLabel><FormControl><Input placeholder="e.g., Ruby Red:#E0115F, Emerald Green:#50C878" {...field} /></FormControl><FormDescription>Comma-separated, format: Name:HEX (e.g., Blue:#0000FF, Green:#00FF00).</FormDescription><FormMessage /></FormItem>
        )} />
        
        <FormField control={form.control} name="sizes" render={({ field }) => (
          <FormItem><FormLabel>Sizes (Optional)</FormLabel><FormControl><Input placeholder="S, M, L, XL" {...field} /></FormControl><FormDescription>Comma-separated values (e.g., S, M, L, 30W, 32W).</FormDescription><FormMessage /></FormItem>
        )} />

        <FormField control={form.control} name="tags" render={({ field }) => (
          <FormItem><FormLabel>Tags (Optional)</FormLabel><FormControl><Input placeholder="e.g., silk, luxury, gift, featured" {...field} /></FormControl><FormDescription>Comma-separated values.</FormDescription><FormMessage /></FormItem>
        )} />
        
        <FormField
          control={form.control}
          name="isFeatured"
          render={({ field }) => (
            <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4 shadow">
              <FormControl>
                <Checkbox
                  checked={field.value}
                  onCheckedChange={field.onChange}
                />
              </FormControl>
              <div className="space-y-1 leading-none">
                <FormLabel>
                  Feature this product?
                </FormLabel>
                <FormDescription>
                  Featured products may appear on the homepage or special sections.
                </FormDescription>
              </div>
            </FormItem>
          )}
        />

        <div className="flex justify-end">
          <Button type="submit" size="lg" disabled={isSubmitting}>
            {isSubmitting && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
            {isSubmitting ? 'Saving...' : (initialData ? 'Save Changes' : 'Add Product')}
          </Button>
        </div>
        <p className="text-sm text-destructive text-center">
            Note: Product data is managed in-memory for this demo. Changes will be lost on server restart.
        </p>
      </form>
    </Form>
  );
}

